"""Определите класс “Прямая” со свойствами: координаты двух точек (x1, y1) и (x2, y2),- и методами:
вывод уравнения прямой и определение точек пересечения с осями координат.
"""
"""
Измените класс “Прямая” следующим образом:
свойства класса - координаты двух точек (x1, y1) и (x2, y2) - должны быть динамическими и задаваться внутри нового
 метода, задающего прямую;
добавьте 3 статических свойства - количество прямых, параллельных осям координат, и прямых, проходящих через точку
 начала координат (проверки должны осуществляться в соответствующих методах).
"""
"""Изменить классы “Прямая” и “Матрица”  следующим образом:
все статические свойства классов должны изменяться только внутри классовых методов;
выделить один или несколько вспомогательных методов (если это не было сделано ранее) и оформить их в виде статических
методов.
"""


class Line:
    """
    Класс прямая
    """
    # статические переменные
    number = 0
    are_parallel = 0
    zero_cross = 0

    @classmethod
    def line_cross(cls, num, x1, x2, y1, y2, c):
        """
        Считает количество созданных прямых, количество параллельных прямых осям координат и количество прямых
        пересекающих центр координат.
        :return: количество прямых
        """
        Line.number += num
        if (x1 == x2) or (y1 == y2):
            Line.are_parallel += 1
        if c == 0:
            Line.zero_cross += 1

    def set(self, x1, y1, x2, y2):
        """
        Задает динамические параметры прямой.
        :return: координаты и количество прямых.
        """
        self.x1, self.x2, self.y1, self.y2 = x1, x2, y1, y2
        Line.line_cross(1, x1, x2, y1, y2, x2 * y1 - x1 * y2)

    def line_equation(self):
        """
        Составляет формулу прямой, считает количество пересечений с началом координат, считает количество параллельных
        прямых осям координат.
        :return: формула прямой, количество прямых
        """
        x1, x2, y1, y2 = self.x1, self.x2, self.y1, self.y2
        a = y2 - y1
        b = x1 - x2
        c = x2*y1 - x1*y2
        print("Уравнение прямой имеет вид: "'{:+}'.format(a)+'x'+'{:+}'.format(b)+'y'+'{:+}'.format(c)+'=0')
        point = Line.cross_point(x1, x2, y1, y2)
        print(f'Точки пересечения прямой с осями координат: ({round(point[0])}:0), (0:{round(point[1])})')

    @staticmethod
    def cross_point(x1, x2, y1, y2):
        """
        Вычисляет точки пересечения прямой с осями координат.
        :return: две координаты
        """
        x = None
        y = None
        if (x1 != x2) and (y1 != y2):
            x = -(x2*y1 - x1*y2)/(y2 - y1)  # пересечение с Х
            y = -(x2*y1 - x1*y2)/(x1 - x2)  # пересечение с Y
        elif x1 == x2:
            x = x1
            y = 0
        elif y1 == y2:
            y = y1
            x = 0
        point = [x, y]
        return point


print()
print("*"*60)
l1 = Line()
l1.set(1, 2, 2, 3)
l1.line_equation()

print("*"*60)
l2 = Line()
l2.set(10, 10.5, 20, 20)
l2.line_equation()

print("*"*60)
l3 = Line()
l3.set(10, 10, 10, 20)
l3.line_equation()

print("="*60)
print("\tКоличество пересечений с началом координат:", Line.zero_cross)
print("\tЧисло прямых:", Line.number)
print("\tКоличество параллельных прямых:", Line.are_parallel)
